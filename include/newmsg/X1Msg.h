// Generated by gencpp from file newmsg/X1Msg.msg
// DO NOT EDIT!


#ifndef NEWMSG_MESSAGE_X1MSG_H
#define NEWMSG_MESSAGE_X1MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <newmsg/X1Point.h>

namespace newmsg
{
template <class ContainerAllocator>
struct X1Msg_
{
  typedef X1Msg_<ContainerAllocator> Type;

  X1Msg_()
    : header()
    , timebase(0)
    , point_num(0)
    , lidar_id(0)
    , rsvd()
    , points()
    , ego_info()
    , box_num(0)
    , trackIds()
    , trackClasses()
    , trackBoxes()  {
      rsvd.assign(0);

      ego_info.assign(0.0);
  }
  X1Msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , timebase(0)
    , point_num(0)
    , lidar_id(0)
    , rsvd()
    , points(_alloc)
    , ego_info()
    , box_num(0)
    , trackIds(_alloc)
    , trackClasses(_alloc)
    , trackBoxes(_alloc)  {
  (void)_alloc;
      rsvd.assign(0);

      ego_info.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _timebase_type;
  _timebase_type timebase;

   typedef uint32_t _point_num_type;
  _point_num_type point_num;

   typedef uint8_t _lidar_id_type;
  _lidar_id_type lidar_id;

   typedef boost::array<uint8_t, 3>  _rsvd_type;
  _rsvd_type rsvd;

   typedef std::vector< ::newmsg::X1Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::newmsg::X1Point_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef boost::array<float, 7>  _ego_info_type;
  _ego_info_type ego_info;

   typedef uint32_t _box_num_type;
  _box_num_type box_num;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _trackIds_type;
  _trackIds_type trackIds;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _trackClasses_type;
  _trackClasses_type trackClasses;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _trackBoxes_type;
  _trackBoxes_type trackBoxes;





  typedef boost::shared_ptr< ::newmsg::X1Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::newmsg::X1Msg_<ContainerAllocator> const> ConstPtr;

}; // struct X1Msg_

typedef ::newmsg::X1Msg_<std::allocator<void> > X1Msg;

typedef boost::shared_ptr< ::newmsg::X1Msg > X1MsgPtr;
typedef boost::shared_ptr< ::newmsg::X1Msg const> X1MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::newmsg::X1Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::newmsg::X1Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace newmsg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'newmsg': ['/home/dji/iX1_0830_ws/src/newmsg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::newmsg::X1Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::newmsg::X1Msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::newmsg::X1Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::newmsg::X1Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::newmsg::X1Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::newmsg::X1Msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::newmsg::X1Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d792d7f4c78a3b023d5ac9420d35af1c";
  }

  static const char* value(const ::newmsg::X1Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd792d7f4c78a3b02ULL;
  static const uint64_t static_value2 = 0x3d5ac9420d35af1cULL;
};

template<class ContainerAllocator>
struct DataType< ::newmsg::X1Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "newmsg/X1Msg";
  }

  static const char* value(const ::newmsg::X1Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::newmsg::X1Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Livox publish pointcloud msg format.\n"
"\n"
"Header header             # ROS standard message header\n"
"uint64 timebase           # The time of first point\n"
"uint32 point_num          # Total number of pointclouds\n"
"uint8  lidar_id           # Lidar device id number\n"
"uint8[3]  rsvd            # Reserved use\n"
"X1Point[] points      # Pointcloud data\n"
"\n"
"# ego-motion\n"
"float32[7] ego_info       # ego\n"
"\n"
"# boxes\n"
"uint32 box_num            # tracked box num\n"
"int32[] trackIds          # tracked box id list\n"
"float32[] trackClasses    # tracked box class list\n"
"float32[] trackBoxes      # tracked box coords, 8 vertex (24 float)\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: newmsg/X1Point\n"
"# Livox costom pointcloud format.\n"
"\n"
"uint32 offset_time      # offset time relative to the base time\n"
"float32 x               # X axis, unit:m\n"
"float32 y               # Y axis, unit:m\n"
"float32 z               # Z axis, unit:m\n"
"uint8 reflectivity      # reflectivity, 0~255\n"
"uint8 line              # laser number in lidar\n"
"int32 labelId           # point seg/track id\n"
"\n"
;
  }

  static const char* value(const ::newmsg::X1Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::newmsg::X1Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.timebase);
      stream.next(m.point_num);
      stream.next(m.lidar_id);
      stream.next(m.rsvd);
      stream.next(m.points);
      stream.next(m.ego_info);
      stream.next(m.box_num);
      stream.next(m.trackIds);
      stream.next(m.trackClasses);
      stream.next(m.trackBoxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct X1Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::newmsg::X1Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::newmsg::X1Msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timebase: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timebase);
    s << indent << "point_num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.point_num);
    s << indent << "lidar_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lidar_id);
    s << indent << "rsvd[]" << std::endl;
    for (size_t i = 0; i < v.rsvd.size(); ++i)
    {
      s << indent << "  rsvd[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.rsvd[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::newmsg::X1Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "ego_info[]" << std::endl;
    for (size_t i = 0; i < v.ego_info.size(); ++i)
    {
      s << indent << "  ego_info[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ego_info[i]);
    }
    s << indent << "box_num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.box_num);
    s << indent << "trackIds[]" << std::endl;
    for (size_t i = 0; i < v.trackIds.size(); ++i)
    {
      s << indent << "  trackIds[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.trackIds[i]);
    }
    s << indent << "trackClasses[]" << std::endl;
    for (size_t i = 0; i < v.trackClasses.size(); ++i)
    {
      s << indent << "  trackClasses[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trackClasses[i]);
    }
    s << indent << "trackBoxes[]" << std::endl;
    for (size_t i = 0; i < v.trackBoxes.size(); ++i)
    {
      s << indent << "  trackBoxes[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trackBoxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEWMSG_MESSAGE_X1MSG_H
